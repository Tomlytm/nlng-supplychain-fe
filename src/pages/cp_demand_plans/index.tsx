import PageHeader from '@/components/PageHeader'
import { ChevronDownIcon, ChevronRightIcon } from '@chakra-ui/icons'
import { Accordion, AccordionButton, AccordionItem, AccordionPanel, Box, useStatStyles } from '@chakra-ui/react'
import React, { useEffect, useState } from 'react'
import { useRouter } from 'next/router'
import DemandPlanServices from '@/services/demand_plan_services'
function DemanPlanCycles() {
    const router = useRouter();
    const [years, setYears] = useState<any[]>([]);
    const [depts, setDepts] = useState<any[]>([]);
    const [loading, setLoading] = useState(false)
    async function getCycleYears() {
        setLoading(true);
        try {
            const res = await DemandPlanServices.getCycleYears();
            console.log(res.data)
            setYears(res?.data);
            setLoading(false)

        } catch (error: any) {
            console.log(error);

            setLoading(false);
            // const errorMessage = error?.response?.data?.message;
            toast({
                status: "error",
                description: "error occured, try again later",
                position: "bottom-right",
            });
            // setApiErrorMessage(errorMessage, "error");
            return;
        }
    }
    async function getDepts(year: number) {
        // setLoading(true);
        try {
            const res = await DemandPlanServices.getDeptByYear(year);
            console.log(res.data)
            setDepts(res?.data);
            // setLoading(false)

        } catch (error: any) {
            console.log(error);

            // setLoading(false);
            // const errorMessage = error?.response?.data?.message;
            toast({
                status: "error",
                description: "error occured, try again later",
                position: "bottom-right",
            });
            // setApiErrorMessage(errorMessage, "error");
            return;
        }
    }
    useEffect(() => {
        getCycleYears();
    }, [])
    return (
        <div className='space-y-3'>
            <PageHeader title='Demand Planning cycles' />
            {loading ? <>loading...</> : (
                <div className='bg-white rounded-lg shadow-sm  p-5'>
                    <Accordion allowToggle borderStyle={'none'}>
                        {
                            years?.map((cycle, i) => (
                                <AccordionItem key={i} className='border-0' border="none">
                                    <h2>
                                        <AccordionButton className='border border-[#D8D8D8] rounded-lg '>
                                            <Box onClick={() => getDepts(Number(cycle.year))} flex="1" textAlign="left" className='text-2xl text-[#101828] font-medium'>
                                                <div className='flex gap-3 items-center'>
                                                    {cycle.year}
                                                    {
                                                        cycle.status === "ACTIVE" && (
                                                            <svg width="64" height="26" viewBox="0 0 64 26" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                                <rect width="64" height="26" fill="#CFFFE7" />
                                                                <path d="M16.846 15.33H12.59L11.806 17.5H10.462L13.99 7.798H15.46L18.974 17.5H17.63L16.846 15.33ZM16.482 14.294L14.718 9.366L12.954 14.294H16.482ZM20.0356 13.65C20.0356 12.8567 20.1943 12.166 20.5116 11.578C20.8289 10.9807 21.2676 10.5187 21.8276 10.192C22.3969 9.86533 23.0456 9.702 23.7736 9.702C24.7163 9.702 25.4909 9.93067 26.0976 10.388C26.7136 10.8453 27.1196 11.48 27.3156 12.292H25.9436C25.8129 11.8253 25.5563 11.4567 25.1736 11.186C24.8003 10.9153 24.3336 10.78 23.7736 10.78C23.0456 10.78 22.4576 11.032 22.0096 11.536C21.5616 12.0307 21.3376 12.7353 21.3376 13.65C21.3376 14.574 21.5616 15.288 22.0096 15.792C22.4576 16.296 23.0456 16.548 23.7736 16.548C24.3336 16.548 24.8003 16.4173 25.1736 16.156C25.5469 15.8947 25.8036 15.5213 25.9436 15.036H27.3156C27.1103 15.82 26.6996 16.45 26.0836 16.926C25.4676 17.3927 24.6976 17.626 23.7736 17.626C23.0456 17.626 22.3969 17.4627 21.8276 17.136C21.2676 16.8093 20.8289 16.3473 20.5116 15.75C20.1943 15.1527 20.0356 14.4527 20.0356 13.65ZM30.5695 10.878V15.4C30.5695 15.7733 30.6488 16.0393 30.8075 16.198C30.9662 16.3473 31.2415 16.422 31.6335 16.422H32.5715V17.5H31.4235C30.7142 17.5 30.1822 17.3367 29.8275 17.01C29.4728 16.6833 29.2955 16.1467 29.2955 15.4V10.878H28.3015V9.828H29.2955V7.896H30.5695V9.828H32.5715V10.878H30.5695ZM34.7731 8.582C34.5304 8.582 34.3251 8.498 34.1571 8.33C33.9891 8.162 33.9051 7.95667 33.9051 7.714C33.9051 7.47133 33.9891 7.266 34.1571 7.098C34.3251 6.93 34.5304 6.846 34.7731 6.846C35.0064 6.846 35.2024 6.93 35.3611 7.098C35.5291 7.266 35.6131 7.47133 35.6131 7.714C35.6131 7.95667 35.5291 8.162 35.3611 8.33C35.2024 8.498 35.0064 8.582 34.7731 8.582ZM35.3891 9.828V17.5H34.1151V9.828H35.3891ZM40.4164 16.324L42.7964 9.828H44.1544L41.1444 17.5H39.6604L36.6504 9.828H38.0224L40.4164 16.324ZM52.4081 13.37C52.4081 13.6127 52.3941 13.8693 52.3661 14.14H46.2341C46.2807 14.896 46.5374 15.4887 47.0041 15.918C47.4801 16.338 48.0541 16.548 48.7261 16.548C49.2767 16.548 49.7341 16.422 50.0981 16.17C50.4714 15.9087 50.7327 15.5633 50.8821 15.134H52.2541C52.0487 15.8713 51.6381 16.4733 51.0221 16.94C50.4061 17.3973 49.6407 17.626 48.7261 17.626C47.9981 17.626 47.3447 17.4627 46.7661 17.136C46.1967 16.8093 45.7487 16.3473 45.4221 15.75C45.0954 15.1433 44.9321 14.4433 44.9321 13.65C44.9321 12.8567 45.0907 12.1613 45.4081 11.564C45.7254 10.9667 46.1687 10.5093 46.7381 10.192C47.3167 9.86533 47.9794 9.702 48.7261 9.702C49.4541 9.702 50.0981 9.86067 50.6581 10.178C51.2181 10.4953 51.6474 10.934 51.9461 11.494C52.2541 12.0447 52.4081 12.67 52.4081 13.37ZM51.0921 13.104C51.0921 12.6187 50.9847 12.2033 50.7701 11.858C50.5554 11.5033 50.2614 11.2373 49.8881 11.06C49.5241 10.8733 49.1181 10.78 48.6701 10.78C48.0261 10.78 47.4754 10.9853 47.0181 11.396C46.5701 11.8067 46.3134 12.376 46.2481 13.104H51.0921Z" fill="#007A3D" />
                                                            </svg>
                                                        )
                                                    }
                                                </div>
                                            </Box>
                                            <ChevronDownIcon
                                                className='cursor-pointer'
                                                transition="transform 0.2s"
                                                _expanded={{ transform: "rotate(180deg)" }}
                                            />
                                        </AccordionButton>
                                    </h2>
                                    <AccordionPanel pb={4}>
                                        {depts?.map((item, i) => (

                                            <div key={i} className='flex p-3 border-b border-gray-100'>
                                                <Box flex="1" textAlign="left">
                                                    {item.name}
                                                </Box>
                                                <div className='flex gap-2 items-center'>
                                                <svg width="91" height="36" viewBox="0 0 91 36" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                    <rect x="0.5" y="0.5" width="90" height="35" rx="4" fill="#FBF2CB" />
                                                    <path d="M16.12 23.5V13.42H17.807V23.5H16.12ZM25.1328 23.5V19.86C25.1328 19.622 25.1165 19.3583 25.0838 19.069C25.0512 18.7797 24.9742 18.502 24.8528 18.236C24.7362 17.9653 24.5588 17.7437 24.3208 17.571C24.0875 17.3983 23.7702 17.312 23.3688 17.312C23.1542 17.312 22.9418 17.347 22.7318 17.417C22.5218 17.487 22.3305 17.6083 22.1578 17.781C21.9898 17.949 21.8545 18.1823 21.7518 18.481C21.6492 18.775 21.5978 19.153 21.5978 19.615L20.5968 19.188C20.5968 18.544 20.7205 17.9607 20.9678 17.438C21.2198 16.9153 21.5885 16.5 22.0738 16.192C22.5592 15.8793 23.1565 15.723 23.8658 15.723C24.4258 15.723 24.8878 15.8163 25.2518 16.003C25.6158 16.1897 25.9052 16.4277 26.1198 16.717C26.3345 17.0063 26.4932 17.3143 26.5958 17.641C26.6985 17.9677 26.7638 18.278 26.7918 18.572C26.8245 18.8613 26.8408 19.097 26.8408 19.279V23.5H25.1328ZM19.8898 23.5V15.94H21.3948V18.285H21.5978V23.5H19.8898ZM31.4702 23.5V15.94H32.9612V17.781L32.7792 17.543C32.8726 17.291 32.9962 17.0623 33.1502 16.857C33.3089 16.647 33.4979 16.4743 33.7172 16.339C33.9039 16.213 34.1092 16.115 34.3332 16.045C34.5619 15.9703 34.7952 15.926 35.0332 15.912C35.2712 15.8933 35.5022 15.9027 35.7262 15.94V17.515C35.5022 17.4497 35.2432 17.4287 34.9492 17.452C34.6599 17.4753 34.3986 17.557 34.1652 17.697C33.9319 17.823 33.7406 17.984 33.5912 18.18C33.4466 18.376 33.3392 18.6 33.2692 18.852C33.1992 19.0993 33.1642 19.3677 33.1642 19.657V23.5H31.4702ZM40.3623 23.71C39.597 23.71 38.925 23.5443 38.3463 23.213C37.7676 22.8817 37.315 22.422 36.9883 21.834C36.6663 21.246 36.5053 20.5693 36.5053 19.804C36.5053 18.978 36.664 18.2617 36.9813 17.655C37.2986 17.0437 37.7396 16.57 38.3043 16.234C38.869 15.898 39.5223 15.73 40.2643 15.73C41.0483 15.73 41.7133 15.9143 42.2593 16.283C42.81 16.647 43.2183 17.1627 43.4843 17.83C43.7503 18.4973 43.8506 19.2837 43.7853 20.189H42.1123V19.573C42.1076 18.7517 41.963 18.152 41.6783 17.774C41.3936 17.396 40.9456 17.207 40.3343 17.207C39.6436 17.207 39.1303 17.4217 38.7943 17.851C38.4583 18.2757 38.2903 18.8987 38.2903 19.72C38.2903 20.4853 38.4583 21.078 38.7943 21.498C39.1303 21.918 39.6203 22.128 40.2643 22.128C40.6796 22.128 41.0366 22.037 41.3353 21.855C41.6386 21.6683 41.872 21.4 42.0353 21.05L43.7013 21.554C43.412 22.2353 42.964 22.765 42.3573 23.143C41.7553 23.521 41.0903 23.71 40.3623 23.71ZM37.7583 20.189V18.915H42.9593V20.189H37.7583ZM47.1178 23.5L44.3738 15.94H46.0608L47.9648 21.421L49.8618 15.94H51.5558L48.8118 23.5H47.1178ZM52.952 14.792V13.245H54.639V14.792H52.952ZM52.952 23.5V15.94H54.639V23.5H52.952ZM60.1729 23.71C59.4075 23.71 58.7355 23.5443 58.1569 23.213C57.5782 22.8817 57.1255 22.422 56.7989 21.834C56.4769 21.246 56.3159 20.5693 56.3159 19.804C56.3159 18.978 56.4745 18.2617 56.7919 17.655C57.1092 17.0437 57.5502 16.57 58.1149 16.234C58.6795 15.898 59.3329 15.73 60.0749 15.73C60.8589 15.73 61.5239 15.9143 62.0699 16.283C62.6205 16.647 63.0289 17.1627 63.2949 17.83C63.5609 18.4973 63.6612 19.2837 63.5959 20.189H61.9229V19.573C61.9182 18.7517 61.7735 18.152 61.4889 17.774C61.2042 17.396 60.7562 17.207 60.1449 17.207C59.4542 17.207 58.9409 17.4217 58.6049 17.851C58.2689 18.2757 58.1009 18.8987 58.1009 19.72C58.1009 20.4853 58.2689 21.078 58.6049 21.498C58.9409 21.918 59.4309 22.128 60.0749 22.128C60.4902 22.128 60.8472 22.037 61.1459 21.855C61.4492 21.6683 61.6825 21.4 61.8459 21.05L63.5119 21.554C63.2225 22.2353 62.7745 22.765 62.1679 23.143C61.5659 23.521 60.9009 23.71 60.1729 23.71ZM57.5689 20.189V18.915H62.7699V20.189H57.5689ZM66.4943 23.5L64.1843 15.926L65.8363 15.94L67.3133 20.791L68.8113 15.94H70.2323L71.7233 20.791L73.2073 15.94H74.8593L72.5493 23.5H71.2333L69.5183 18.299L67.8103 23.5H66.4943Z" fill="#C8811A" />
                                                </svg>


                                                <svg className='cursor-pointer' onClick={() => router.push({ pathname: `/cp_demand_plans/${item?.deptId}`, query: { year: cycle.year, department: item.name, id: item.deptId } })} width="17" height="18" viewBox="0 0 17 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                    <path d="M1 9H16M16 9L8.5 1.5M16 9L8.5 16.5" stroke="#959595" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                                                </svg>
                                            </div>
                                            </div>
                                        ))}

                                    </AccordionPanel>
                                </AccordionItem>
                            ))
                        }
                    </Accordion>
                </div>
            )}
        </div>
    )
}
export default DemanPlanCycles

function toast(arg0: { status: string; description: string; position: string }) {
    // throw new Error('Function not implemented.')
}
